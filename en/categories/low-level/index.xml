<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Low-Level on pwnbuffer</title>
    <link>https://pwnbuffer.org/en/categories/low-level/</link>
    <description>Recent content in Low-Level on pwnbuffer</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://pwnbuffer.org/en/categories/low-level/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>x86 Part. 2 — Number System</title>
      <link>https://pwnbuffer.org/en/posts/neurosys/x86-2/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>https://pwnbuffer.org/en/posts/neurosys/x86-2/</guid>
      <description>Welcome to the second part of our series of articles on Basic Reverse Engineering! Link to heading ██ ██ █████ ██████ ██ ██ ██ ██ ██ ███ █████ ███████ ██ ██ ██ ██ ██ ██ ██ ██ █████ ██████ Now that we&amp;rsquo;ve explored the fundamental concepts of CPU in the first article, it&amp;rsquo;s time to understand how data is represented and manipulated internally by computers. Let&amp;rsquo;s talk about numbering systems, with a focus on hexadecimal, which is crucial for those working with low-level reverse engineering.</description>
    </item>
    <item>
      <title>Review of assembly</title>
      <link>https://pwnbuffer.org/en/posts/slayer/assembly-review/</link>
      <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://pwnbuffer.org/en/posts/slayer/assembly-review/</guid>
      <description>What is assembly? Link to heading Assembly is a low-level programming language, it is written to communicate directly with the processor hardware. Unlike high-level languages, such as the famous Python, assembly operates close to machine code, the famous binary! Each assembly instruction generally represents a single CPU operation, such as moving data between registers, performing arithmetic operations or controlling the flow of execution.&#xA;Assembly is not universal!! It depends directly on the processor architecture.</description>
    </item>
    <item>
      <title>Bypassing Linux Kernel Defenses</title>
      <link>https://pwnbuffer.org/en/posts/black0ut/kernel_linux_bypass/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://pwnbuffer.org/en/posts/black0ut/kernel_linux_bypass/</guid>
      <description>lights off &amp;amp; black0ut on&#xA;1- Introduction Link to heading Hello, Welcome!!!&#xA;In this article, I will discuss how modern protections in the Linux Kernel hinder and mitigate rootkit functionalities, and of course, how to bypass them.&#xA;2- Kernel Address Space Layout Randomization (KASLR) Link to heading As one of the primary defense mechanisms of the Kernel and other systems, it randomizes the kernel&amp;rsquo;s memory addresses on each boot, making exploitation more difficult for attackers.</description>
    </item>
    <item>
      <title>x86 Part. 1 — CPU</title>
      <link>https://pwnbuffer.org/en/posts/neurosys/x86/</link>
      <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://pwnbuffer.org/en/posts/neurosys/x86/</guid>
      <description>This series of articles covers basic low-level concepts in computers, with a specific focus on exploring binaries and reverse engineering. Some points may seem confusing at first, but remember: everything follows a definition. Don’t get stuck in an endless loop of &amp;ldquo;why!?!&amp;rdquo; — just understand each concept and its purpose. You will use these concepts in reverse engineering, binary exploitation, and even malware development in the future.&#xA;What is a CPU?</description>
    </item>
    <item>
      <title>Windows Architecture</title>
      <link>https://pwnbuffer.org/en/posts/tteuw/windows_architecture/</link>
      <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://pwnbuffer.org/en/posts/tteuw/windows_architecture/</guid>
      <description>Prerequisites: Requirements for the users that are planning to learn Malware Development are first of all basics of programming, since mostly deals with the C programming lanaguage, it is a requirement that you are familiar with fundamentals of C.&#xA;So what is actually Windows Architecture? It is what happens under the hood of Windows processes and applications, the internal structure of the Windows operating system, envolves layers like hardware, kernel, executive services, and subsystem DLLs.</description>
    </item>
    <item>
      <title>buffer overflow in practice</title>
      <link>https://pwnbuffer.org/en/posts/slayer/bof/</link>
      <pubDate>Fri, 07 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://pwnbuffer.org/en/posts/slayer/bof/</guid>
      <description>What is buffer overflow? Link to heading Buffer overflow (BOF) is one of the most wellknown and historically significant vulnerabilities in the world of cybersecurity. It occurs when a program writes more data to a buffer than it can hold, causing memory corruption. This flaw can be exploited by pentesters to execute arbitrary code, modify program behavior, or cause a crash.&#xA;Despite the introduction of modern security mechanisms such as ASLR and stack canaries, buffer overflow remains a critical topic in exploit development and pentesting.</description>
    </item>
  </channel>
</rss>
